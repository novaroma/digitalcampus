<!-- Copyright (c) 2013 Nova Roma. All rights reserved. 
   -
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. 
-->
<html>
	<head>
		<title>{{ .ApplicationName }}</title>
		<script type="text/javascript">
  		(function() {
   			 var po = document.createElement('script');
    		po.type = 'text/javascript'; po.async = true;
    		po.src = 'https://plus.google.com/js/client:plusone.js';
    		var s = document.getElementsByTagName('script')[0];
    		s.parentNode.insertBefore(po, s);
  		})();
  		</script>
  		<!-- JavaScript specific to this application that is not related to API
     		calls -->
	 	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js" ></script>
		<link href="/content/stylesheets/default.css" rel="stylesheet" />
	</head>
	<body>
		<h1 class="center">Digital Campus</h1>

		<div id="gConnect">
			<button class="g-signin"
				data-scope="https://www.googleapis.com/auth/plus.login"
				data-requestvisibleactions="http://schemas.google.com/AddActivity"
				data-clientId="{{ .ClientID }}"
				data-accesstype="offline"
				data-callback="onSignInCallback"
				data-cookiepolicy="single_host_origin">
			</button>
		</div>

		<div id="authOps" style="display:none">
			<h2>User is now signed in to the app using Google+</h2>
			<p>If the user chooses to disconnect, the app must delete all stored
			   information retrieved from Google for the given user.</p>
			<button id="disconnect">Disconnect your Google account from this app</button>

			<h2>Users's profile information</h2>
			<p>This data is retrieved client-side by using the Google JavaScript
			   API client library.</p>
			<div id="profile"></div>

			<h2>Users's friends that are visible to this app.</h2>
			<p>This data is retrieved from your server, where your server makes
			   an authorized HTTP request on the user's behalf.</p>
			<p>If your app uses server-side rendering, this is the section you 
			   would change using your server-side templating system.</p>
			<div id="visiblePeople"></div>

			<h2>Authentication Logs</h2>
			<pre id="authResult"></pre>
		</div>

		<h3 class="center">Task List</h3>
		<ol>
			<li>Google based oauth authentication</li>
			<li>Ability to add periods/sections</li>
			<li>Ability to create daily landing page for students</li>
			<li>Ability to edit class roster</li>
			<li>Ability to take attendance based off of student log in</li>
			<li>
				Ability for teacher to export attendance data to meaningful 
				format
			</li>
			<li>Ability to add school years</li>
			<li>Ability to divide school years into meaningful divisions.</li>
			<li>Ability to add lesson plan.</li>
			<li>Ability to link google doc to lesson plan.</li>
		</ol>

		<footer class="center">
			<div>
				Digital Campus is an open source classroom management and 
				planning tool for teachers. Source code can be found on
				<a href="https://github.com/novaroma/digitalcampus">GitHub</a>
			</div>
			<div>
				Copyright (c) 2013 Nova Roma. All rights Reserved
			</div>
		</footer>
	</body>

	<script type="text/JavaScript">
		var helper = (function() {
			var BASE_API_PATH = 'plus/v1/';
			var authResult = undefined;

			return {
				/**
				 * Hides the sign-in button and connects the server-side app 
				 * after the user successfully signs in.
				 *
				 * @param {Object} authResult An Object which contains the 
				 * 	access token and other authentication information.
				 */
				onSignInCallback: function(authResult) {
					$('#authResult').html('Auth Result:<br/>');
					for (var field in authResult) {
						$('#authResult').append(' ' + field + ': ' + authResult[field] + '<br/>');
					}
					if (authResult['access_token']) {
						// The user is signed in 
						this.authResult = authResult;
						// After we load the Google+ API, render the profile 
						// data from Google+
						gapi.client.load('plus','v1',this.renderProfile);
					} else if (authResult['error']) {
						// There was an error, which means the user is not 
						// signed in. As an example, you can troubleshoot by 
						// writing to the console:
						console.log('There was an error: ' + authResult['error']);
						$('#authResult').append('Logged out');
						$('#authOps').hide('slow');
						$('#gConnect').show();
					}
					console.log('authResult', authResult);
				},
				/** 
				 * Retrieves and renders the authenticated users's Google+ 
				 * profile.
				 */
				renderProfile: function() {
					var request = gapi.client.plus.people.get({'userId': 'me'});
					request.execute( function(profile) {
						$('#profile').empty();
						if (profile.error) {
							$('#profile').append(profile.error);
							return;
						}
						helper.connectServer(profile.id);
						$('#profile').append(
							$('<p><img src=\"' + profile.image.url + '\"></p>'));
						$('#profile').append(
							$('<p>Hello ' + profile.displayName + '!<br />Tagline: ' +
								profile.tagline + '<br />About: ' + profile.aboutMe + '</p>'));
						if (profile.cover && profile.coverPhoto) {
							$('#profile').append(
								$('<p><img src=\"' + profile.coverPhoto.url + '\"></p>'));
						}
					});
					$('#authOps').show('slow');
					$('#gConnect').hide();
				},
				/**
				 * Calls the server endpoint to disconnect the app for the user.
				 */
				disconnectServer: function() {
					// Revoke the server tokens 
					$.ajax({
						type: 'POST',
						url: window.location.href + 'disconnect',
						async: false,
						success: function(result) {
							console.log('revoke response: ' + result);
							$('#authOps').hide();
							$('#profile').empty();
							$('#visiblePeople').empty();
							$('#authResult').empty();
							$('#gConnect').show();
						},
						error: function(e) {
							console.log(e);
						}
					});
				},
				/**
				 * Calls the server endpoint to connect the app for the user.
				 * The client sends the one-time authorization code to the 
				 * server exchange the code for its own tokens to use for 
				 * offline API access.
				 * For more information, see:
				 *   https://developers.google.com/+/web/signing/server-side-flow
				 */
				connectServer: function(gplusId) {
					console.log(this.authResult.code);
					$.ajax({
						type: 'POST',
						url: window.location.href + 'connect?state={{ .State }}',
						contentType: 'application/octet-stream; charset=utf-8',
						success: function(result) {
							console.log(result);
							helper.people();
						},
						processData: false,
						data: this.authResult.code
					});
				},
				/** 
				 * Calls the server endpoint to get the list of people visible
				 * to this app.
				 */
				people: function() {
					$.ajax({
						type: 'GET',
						url: window.location.href + 'people',
						contentType: 'application/octet-stream; charset=utf-8',
						success: function(result) {
							helper.appendCircled(result);
						},
						processData: false
					});
				},
				/**
				 * Displays visible People retrieved from server.
				 *
				 * @param {Object} people A list of Google+ Person resources.
				 */
				appendCircled: function(people) {
					$('#visiblePeople').empty();

					$('#visiblePeople').append('Number of people visible to this app: ' +
						people.totalItems + '<br/>');
					for (var personIndex in people.items) {
						person = people.items[personIndex];
						$('#visiblePeople').append('<img src="' + person.image.url + '">');
					}
				},
			};
		})();

		/**
		 * Perform jQuery initialization and check to ensure that you updated 
		 * your client ID.
		 */
		$(document).ready(function() {
			$('#disconnect').click(helper.disconnectServer);
			if ($('[data-clientid="YOUR_CLIENT_ID"]').length > 0) {
				alert('This sample requires your OAuth credentials (client ID)' +
					'from the Google APIs console:\n' +
					'    https://code.google.com/apis/console/#:access\n\n' +
					'Find and replace YOUR_CLIENT_ID with your client ID and ' +
					'YOUR_CLIENT_ID with your client secret in the project ' +
					'sources.'
				);
			}
		});

		/**
		 * Calls the helper method that handles the authentication flow.
		 *
		 * @param {Object} authResult An Object which contains the access token
		 * 	and other authentication informaiton.
		 */
		function onSignInCallback(authResult) {
			helper.onSignInCallback(authResult);
		}
	</script>
</html>